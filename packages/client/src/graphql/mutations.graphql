mutation startCrawl(
  $appId: ID!
  $url: URL!
  $pattern: [String]
  $channelId: String!
) {
  startWebsiteCrawling(
    appId: $appId
    webUrl: $url
    webUrlPatterns: $pattern
    channelId: $channelId
  )
}

mutation addScheduledCrawl(
  $appId: ID!
  $url: URL!
  $pattern: [String]
  $daysOfWeek: [SchedulerDaysOfWeek]!
) {
  app {
    update(appId: $appId) {
      scheduleWeeklyWebCrawls(
        webUrl: $url
        webUrlPatterns: $pattern
        daysOfWeek: $daysOfWeek
      ) {
        scheduleId
        type
        event
        parameters
        ... on WebCrawlWeeklySchedule {
          daysOfWeek
        }
        ... on WebCrawlMonthlySchedule {
          dayOfMonth
        }
      }
    }
  }
}

mutation updateStatus($appId: ID!, $type: String!, $notes: String) {
  app {
    update(appId: $appId) {
      changeStatus(type: $type, note: $notes) {
        status {
          type
          notes
          email
          timestamp
          statusHistory {
            type
            email
            timestamp
            notes
          }
        }
      }
    }
  }
}

mutation addChatWidgetChannel(
  $appId: ID!
  $channel: ChatWidgetAppChannelInput!
) {
  addChatWidgetChannel(appId: $appId, channel: $channel) {
    __typename
    id
    type
    endPoint
    useNLU
    directoryListing
    id
    status {
      type
    }
    cta {
      message
      timeout
    }
    direct
    disabled
    accountKey
    botName
    avatarUrl
    key
    serverUrl
    middlewareUrl
    autocompleteSuggestionsUrl
    urls {
      policies {
        pattern
        behavior {
          type
          ... on ChatWidgetAppChannelUrlBehaviorNewWindow {
            width
            height
          }
        }
      }
      defaultBehavior {
        type
        ... on ChatWidgetAppChannelUrlBehaviorNewWindow {
          width
          height
        }
      }
    }
    autoOpenOnWidth
    header {
      status {
        online
        offline
        away
        connecting
      }
      actions {
        minimize
        cancel
      }
    }
    theme {
      border {
        color
        width
        radius
      }
      carousel {
        button {
          color
        }
        subtitle {
          color
          fontFamily
          fontSize
          fontWeight
          fontWeight
        }
        title {
          color
          fontFamily
          fontSize
          fontWeight
          fontWeight
        }
      }
      chatButton {
        background
        margin {
          top
          right
          bottom
          left
        }
      }
      content {
        background
      }
      cta {
        background
        text {
          color
          fontFamily
          fontSize
        }
      }
      footer {
        background
      }
      header {
        background
        border {
          color
          radius
          width
        }
        text {
          color
          fontFamily
          fontSize
        }
      }
      input {
        background
        border {
          color
          width
          radius
        }
        text {
          color
          fontFamily
          fontSize
        }
      }
      menu {
        item {
          height
          background
          text {
            color
            fontSize
            fontFamily
            fontWeight
            fontStyle
          }
        }
      }
      menuButton {
        color
      }
      messages {
        mine {
          bubbleColor
          text {
            color
            fontSize
            fontFamily
            fontWeight
            fontStyle
          }
        }
        others {
          bubbleColor
          text {
            color
            fontSize
            fontFamily
            fontWeight
            fontStyle
          }
        }
        padding {
          left
          right
          bottom
          top
        }
        maxWidth
      }
      minimizeButton {
        color
      }
      cancelButton {
        color
      }
      primaryColor
      sendButton {
        color
      }
      size {
        width
        height
      }
    }
  }
}

mutation addApp($app: AppInput) {
  addApp(app: $app) {
    appId
    name
    organizationId
  }
}

mutation updateAppBy($appId: ID!, $app: UpdateAppInput!) {
  updateApp(appId: $appId, app: $app) {
    appId
    name
    organizationId
    description
    keywords
    largeIcon
    mediumIcon
    smallIcon
    summary
    templateType
    internalNotes
    website
    websiteData {
      callsToAction
      primaryColor
      secondaryColor
    }
  }
}

mutation addLexV2Channel($appId: ID!, $channel: LexV2ConnectAppChannelInput!) {
  app {
    update(appId: $appId) {
      channel {
        addLexV2Channel(channel: $channel) {
          __typename
          id
          type
          name
          endPoint
          status {
            type
          }
          botId
          botName
          botRegion
          detectSentiment
          enableModelImprovements
          idleSessionTTLInSeconds
          isLinkedToKendra
          lexFulfillmentLambdaARN
          lexPostTextUrl
          managementRole
          managementRoleExternalId
          voiceId
        }
      }
    }
  }
}

mutation addSurefireIntegration(
  $appId: ID!
  $token: String!
  $endpoint: URLString!
  $dataMap: String!
) {
  app {
    update(appId: $appId) {
      integration {
        addSurefireIntegration(
          token: $token
          endpoint: $endpoint
          dataMap: $dataMap
        ) {
          isLinked
          isActive
          isActive
        }
      }
    }
  }
}
