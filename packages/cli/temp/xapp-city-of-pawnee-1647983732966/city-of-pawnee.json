{
  "app": {
    "templateType": "OC_STUDIO_STARTER_TEMPLATE",
    "icon": "https://assets.xapp.ai/prod/xapp/city-of-pawnee/icons/18afd3c7-ba8e-4906-a426-b13c11bbd450.png",
    "largeBanner": "https://assets.xapp.ai/prod/xapp/city-of-pawnee/banners/1920x1080/eae789ac-07a7-4875-8252-ba5a9b9a7144.png",
    "banner": "https://assets.xapp.ai/prod/xapp/city-of-pawnee/banners/eae789ac-07a7-4875-8252-ba5a9b9a7144.png",
    "largeIcon": "https://assets.xapp.ai/prod/xapp/city-of-pawnee/icons/512x512/18afd3c7-ba8e-4906-a426-b13c11bbd450.png",
    "invocationName": "foo",
    "keywords": [
      "XAPP",
      "XAPPmedia",
      "XAPP AI Solutions"
    ],
    "mediumIcon": "https://assets.xapp.ai/prod/xapp/city-of-pawnee/icons/192x192/18afd3c7-ba8e-4906-a426-b13c11bbd450.png",
    "smallIcon": "https://assets.xapp.ai/prod/xapp/city-of-pawnee/icons/108x108/18afd3c7-ba8e-4906-a426-b13c11bbd450.png",
    "examplePhrases": [
      "Alexa, open foo",
      "Alexa, pause",
      "Alexa, resume"
    ],
    "name": "City of Pawnee",
    "appId": "city-of-pawnee",
    "organizationId": "xapp"
  },
  "intents": [
    {
      "slots": [
        {
          "name": "address",
          "nlu": {
            "lex-connect": {
              "type": "AMAZON.PostalAddress"
            }
          }
        }
      ],
      "intentId": "Address",
      "name": "‚úâÔ∏èAddress",
      "contexts": [
        {
          "name": "expecting_address"
        }
      ],
      "utterancePatterns": [
        "${address}"
      ]
    },
    {
      "slots": [
        {
          "name": "county",
          "type": "COUNTIES"
        }
      ],
      "intentId": "County",
      "name": "üó∫Ô∏èCounty",
      "contexts": [],
      "utterancePatterns": [
        "${county} {county|}"
      ]
    },
    {
      "slots": [
        {
          "name": "number",
          "type": "STENTOR.NUMBER"
        }
      ],
      "intentId": "NumberOnly",
      "name": "üî¢Number Only",
      "contexts": [],
      "utterancePatterns": [
        "${number}"
      ]
    },
    {
      "slots": [
        {
          "name": "no",
          "type": "NO"
        }
      ],
      "intentId": "OCNo",
      "langCode": "en-US",
      "name": "üëé No",
      "utterancePatterns": [
        "${no}",
        "${no} {thanks| thank you|}"
      ]
    },
    {
      "slots": [
        {
          "name": "yes",
          "type": "YES"
        }
      ],
      "intentId": "OCYes",
      "langCode": "en-US",
      "name": "üëç Yes",
      "utterancePatterns": [
        "${yes}",
        "${yes} {thanks|thank you|please|}"
      ]
    },
    {
      "slots": [],
      "intentId": "RepeatIntent",
      "langCode": "en-US",
      "name": "üîÅ Repeat",
      "utterancePatterns": [
        "repeat",
        "repeat please",
        "please repeat",
        "say that again",
        "say again"
      ]
    },
    {
      "content": {},
      "slots": [],
      "intentId": "StopIntent",
      "langCode": "en-US",
      "name": "üõë Stop",
      "utterancePatterns": [
        "{please|} stop {please|}",
        "{please|} off {please|}",
        "{please|} shut up {please|}"
      ]
    },
    {
      "slots": [],
      "intentId": "ThatsAllIntent",
      "langCode": "en-US",
      "name": "üëç That's All",
      "utterancePatterns": [
        "that's all",
        "that is all",
        "thats all",
        "nothing else"
      ]
    }
  ],
  "handlers": [
    {
      "content": {
        "ByeIntent": [
          {
            "outputSpeech": {
              "displayText": "${BYE}",
              "ssml": "${BYE}",
              "suggestions": []
            },
            "segments": {
              "BYE": [
                {
                  "segment": {
                    "displayText": "Goodbye",
                    "ssml": "Goodbye"
                  }
                },
                {
                  "segment": {
                    "displayText": "Bye",
                    "ssml": "Bye"
                  }
                }
              ]
            }
          }
        ]
      },
      "data": {},
      "slots": [],
      "intentId": "ByeIntent",
      "langCode": "en-US",
      "name": "üëã Bye",
      "type": "ConversationHandler",
      "utterancePatterns": [
        "adios",
        "bye bye",
        "ciao",
        "farewell",
        "goodbye",
        "see ya",
        "see you",
        "so long"
      ]
    },
    {
      "content": {
        "CancelIntent": [
          {
            "outputSpeech": {
              "displayText": "Ok, goodbye.",
              "ssml": "Ok, goodbye.",
              "suggestions": []
            }
          }
        ]
      },
      "data": {},
      "slots": [],
      "intentId": "CancelIntent",
      "langCode": "en-US",
      "name": "‚ùå Cancel",
      "type": "ConversationHandler",
      "utterancePatterns": [
        "cancel",
        "cancel please",
        "please cancel",
        "cancel now"
      ]
    },
    {
      "content": {
        "Address": [
          {
            "outputSpeech": {
              "ssml": "<speak>Ok, we will send someone from REI right away to help with the ${pest} at ${address}.</speak>",
              "displayText": "Ok, we will send someone from REI right away to help with the ${pest} at ${address}."
            }
          }
        ],
        "CitizenReport": [
          {
            "context": {
              "active": [
                {
                  "name": "expecting_address",
                  "timeToLive": {
                    "turnsToLive": 2,
                    "timeToLiveInSeconds": 400
                  }
                }
              ]
            },
            "reprompt": {
              "ssml": "<speak>Can you please provide the address?</speak>",
              "displayText": "Can you please provide the address?"
            },
            "conditions": "slotExists(\"pest\")",
            "outputSpeech": {
              "ssml": "<speak>Ok, ${CALM}.  Can you please provide the address so we can send a response team?</speak>",
              "displayText": "Ok, ${CALM}.  Can you please provide the address so we can send a response team?"
            },
            "segments": {
              "CALM": [
                {
                  "segment": {
                    "ssml": "<speak>don't panic</speak>",
                    "displayText": "don't panic"
                  }
                },
                {
                  "segment": {
                    "ssml": "<speak>stay calm</speak>",
                    "displayText": "stay calm"
                  }
                },
                {
                  "segment": {
                    "ssml": "<speak>don't look it in the eyes</speak>",
                    "displayText": "don't look it in the eyes"
                  }
                },
                {
                  "segment": {
                    "ssml": "<speak>no sudden movements</speak>",
                    "displayText": "no sudden movements"
                  }
                }
              ]
            }
          }
        ]
      },
      "forward": {},
      "contexts": [],
      "slots": [
        {
          "name": "pest",
          "type": "PEST"
        }
      ],
      "intentId": "CitizenReport",
      "name": "üìãCitizen Report",
      "type": "ConversationHandler",
      "utterancePatterns": [
        "i just saw a ${pest}",
        "report a ${pest}",
        "we have a ${pest}"
      ]
    },
    {
      "content": {
        "Address": [
          {
            "outputSpeech": {
              "ssml": "<speak>Thanks, we have noted your request for ${service} at ${address}.  Your reference number is KN0P3.</speak>",
              "displayText": "Thanks, we have noted your request for ${service} at ${address}.  Your reference number is KN0P3."
            }
          }
        ],
        "CitizenRequest": [
          {
            "context": {
              "active": [
                {
                  "name": "expecting_address",
                  "timeToLive": {
                    "turnsToLive": 2,
                    "timeToLiveInSeconds": 400
                  }
                }
              ]
            },
            "outputSpeech": {
              "ssml": "<speak>Sure, may you please provide the address for the ${service}?</speak>",
              "displayText": "Sure, may you please provide the address for the ${service}?"
            },
            "reprompt": {
              "ssml": "<speak>Please provide the address</speak>",
              "displayText": "Please provide the address"
            }
          },
          {
            "conditions": "slotExists(\"pest\")",
            "outputSpeech": {
              "ssml": "<speak>To request ${pest} abatement, please make a request [here](https://michaelmyers.github.io/pawnee/docs/parks-and-recreation#pests)</speak>",
              "displayText": "To request ${pest} abatement, please make a request [here](https://michaelmyers.github.io/pawnee/docs/parks-and-recreation#pests)",
              "suggestions": [
                {
                  "title": "Request Abatement",
                  "url": "https://michaelmyers.github.io/pawnee/docs/parks-and-recreation#pests"
                }
              ]
            }
          }
        ]
      },
      "forward": {},
      "contexts": [],
      "slots": [
        {
          "name": "pest",
          "type": "PEST"
        },
        {
          "name": "service",
          "type": "SERVICE"
        }
      ],
      "intentId": "CitizenRequest",
      "name": "‚òéÔ∏èCitizen Request",
      "type": "ConversationHandler",
      "utterancePatterns": [
        "request ${pest} abatement",
        "request ${service}"
      ]
    },
    {
      "content": {
        "HelpIntent": [
          {
            "outputSpeech": {
              "displayText": "Sure, I can do my best to answer any questions you may have and if there is a question I can't answer I will direct you to the correct resources that can.  What can I help you with?",
              "ssml": "Sure, I can do my best to answer any questions you may have and if there is a question I can't answer I will direct you to the correct resources that can.  What can I help you with?",
              "suggestions": []
            },
            "reprompt": {
              "displayText": "What question can I answer for you?",
              "ssml": "What question can I answer for you?",
              "suggestions": []
            }
          }
        ]
      },
      "data": {},
      "slots": [],
      "intentId": "HelpIntent",
      "langCode": "en-US",
      "name": "‚ÑπÔ∏è Global Help",
      "type": "ConversationHandler",
      "utterancePatterns": [
        "help",
        "help please",
        "i need help",
        "please help"
      ]
    },
    {
      "content": {
        "InputUnknown": [
          {
            "reprompt": {
              "displayText": "Could you try asking in a different way?",
              "ssml": "Could you try asking in a different way?",
              "suggestions": []
            },
            "outputSpeech": {
              "displayText": "Sorry, I don't fully understand you. Can try asking in a different way?",
              "ssml": "Sorry, I don't fully understand you.  Can try asking in a different way?",
              "suggestions": [
                {
                  "title": "Help"
                },
                {
                  "title": "Agent"
                }
              ]
            }
          }
        ]
      },
      "data": {},
      "intentId": "InputUnknown",
      "langCode": "en-US",
      "name": "‚ùî Unknown Input",
      "type": "ConversationHandler",
      "utterancePatterns": []
    },
    {
      "content": {
        "LaunchRequest": [
          {
            "outputSpeech": {
              "ssml": "<speak>${GREETING}, City of Pawnee here. How can I help?</speak>",
              "displayText": "${GREETING}, City of Pawnee here. How can I help?",
              "suggestions": []
            },
            "reprompt": {
              "ssml": "<speak>What can I help you with?</speak>",
              "displayText": "What can I help you with?",
              "suggestions": []
            },
            "segments": {
              "GREETING": [
                {
                  "segment": {
                    "ssml": "<speak>Hi</speak>",
                    "displayText": "Hi"
                  }
                },
                {
                  "segment": {
                    "ssml": "<speak>Hello</speak>",
                    "displayText": "Hello"
                  }
                }
              ]
            }
          }
        ]
      },
      "forward": {},
      "data": {},
      "slots": [],
      "intentId": "LaunchRequest",
      "langCode": "en-US",
      "name": "üëã Welcome",
      "type": "ConversationHandler",
      "utterancePatterns": [
        "hello",
        "hi",
        "howdy"
      ]
    },
    {
      "content": {
        "OCAgent": [
          {
            "outputSpeech": {
              "displayText": "I'm sorry, an agent isn't available at this time.  Is there anything else I can try to help you with?",
              "ssml": "I'm sorry, an agent isn't available at this time.  Is there anything else I can try to help you with?",
              "suggestions": []
            },
            "reprompt": {
              "displayText": "Is there anything else I can try to help you with?",
              "ssml": "Is there anything else I can try to help you with?",
              "suggestions": []
            }
          }
        ]
      },
      "slots": [
        {
          "name": "agent",
          "type": "AGENT"
        }
      ],
      "intentId": "OCAgent",
      "langCode": "en-US",
      "name": "üíÅ Agent",
      "type": "ConversationHandler",
      "utterancePatterns": [
        "${agent}",
        "${agent} {please|now}",
        "i {want|need} to speak to {a|an} ${agent}",
        "give me an ${agent}"
      ]
    },
    {
      "content": {
        "OCSearch": [
          {
            "conditions": "\"${$.request.device.channel}\" === \"intelligent-search\" && !!session('TOP_FAQ')",
            "outputSpeech": {
              "ssml": "<speak>${TOP_FAQ.text}</speak>",
              "displayText": "${TOP_FAQ.markdownText}",
              "suggestions": [
                {
                  "title": "Read More",
                  "url": "${TOP_FAQ.source}"
                }
              ]
            },
            "reprompt": {
              "ssml": "<speak>Any other questions?</speak>",
              "displayText": "Any other questions?"
            }
          },
          {
            "conditions": "\"${$.request.device.channel}\" === \"widget\" && !!session('TOP_FAQ')",
            "outputSpeech": {
              "ssml": "<speak>${TOP_FAQ.text} Any other questions?</speak>",
              "displayText": "${TOP_FAQ.markdownText}\n\nAny other questions?",
              "suggestions": [
                {
                  "title": "Read More",
                  "url": "${TOP_FAQ.source}"
                }
              ]
            },
            "reprompt": {
              "ssml": "<speak>Any other questions?</speak>",
              "displayText": "Any other questions?"
            }
          },
          {
            "conditions": "\"${$.request.device.channel}\" === \"intelligent-search\" && !!session('TOP_FAQ')",
            "outputSpeech": {
              "ssml": "<speak></speak>",
              "displayText": "__Answer__\n\n${TOP_FAQ.markdownText}\n\n",
              "suggestions": [
                {
                  "title": "Read More",
                  "url": "${TOP_FAQ.source}"
                }
              ]
            },
            "reprompt": {
              "ssml": "<speak>Any other questions?</speak>",
              "displayText": "Any other questions?"
            }
          },
          {
            "conditions": "\"${$.request.device.channel}\" === \"widget\" && !!session('TOP_ANSWER') && !session('TOP_FAQ')",
            "outputSpeech": {
              "ssml": "<speak>${TOP_ANSWER.text} Any other questions?</speak>",
              "displayText": "${TOP_ANSWER.markdownText}\n\nAny other questions?",
              "suggestions": [
                {
                  "title": "Read More",
                  "url": "${TOP_ANSWER.source}"
                }
              ]
            },
            "reprompt": {
              "ssml": "<speak>Any other questions?</speak>",
              "displayText": "Any other questions?"
            }
          },
          {
            "conditions": "\"${$.request.device.channel}\" === \"intelligent-search\" && !!session('TOP_ANSWER') && !session('TOP_FAQ')",
            "outputSpeech": {
              "ssml": "<speak>${TOP_ANSWER.text}</speak>",
              "displayText": "__Top Answer__\n\n${TOP_ANSWER.markdownText}",
              "suggestions": [
                {
                  "title": "Read More",
                  "url": "${TOP_ANSWER.source}"
                }
              ]
            },
            "reprompt": {
              "ssml": "<speak>Any other questions?</speak>",
              "displayText": "Any other questions?"
            }
          },
          {
            "conditions": "\"${$.request.device.channel}\" === \"widget\" && !!session('SUGGESTED_ANSWER') && !session('TOP_ANSWER') && !session('TOP_FAQ')",
            "outputSpeech": {
              "ssml": "<speak>Here is what I found...${SUGGESTED_ANSWER.markdownText}  Any other questions?</speak>",
              "displayText": "Here is what I found...\n\"${SUGGESTED_ANSWER.markdownText}\"\nAny other questions?",
              "suggestions": [
                {
                  "title": "Read More",
                  "url": "${SUGGESTED_ANSWER.source}"
                }
              ]
            },
            "reprompt": {
              "ssml": "<speak>Any other questions?</speak>",
              "displayText": "Any other questions?"
            }
          },
          {
            "conditions": "\"${$.request.device.channel}\" === \"intelligent-search\" && !!session('SUGGESTED_ANSWER') && !session('TOP_ANSWER') && !session('TOP_FAQ') && !session('SEARCH_RESULTS')",
            "outputSpeech": {
              "ssml": "<speak>Here is what I found... ${SUGGESTED_ANSWER.markdownText}  Any other questions?</speak>",
              "displayText": "__Suggested Answer__\n\n\"${SUGGESTED_ANSWER.markdownText}\"\nAny other questions?",
              "suggestions": [
                {
                  "title": "Read More",
                  "url": "${SUGGESTED_ANSWER.source}"
                }
              ]
            },
            "reprompt": {
              "ssml": "<speak>Any other questions?</speak>",
              "displayText": "Any other questions?"
            }
          },
          {
            "reprompt": {
              "ssml": "<speak>Any other questions?</speak>",
              "displayText": "Any other questions?"
            },
            "displays": [
              {
                "itemsObject": "${SEARCH_RESULTS}",
                "range": {
                  "length": 3,
                  "from": 0
                },
                "itemsName": "currentResult",
                "type": "LIST",
                "title": "${$.request.rawQuery}",
                "items": [
                  {
                    "description": "${currentResult.document}",
                    "title": "${currentResult.title}",
                    "url": "${currentResult.source}",
                    "synonyms": [],
                    "token": "result-${index}"
                  }
                ]
              }
            ],
            "conditions": "\"${$.request.device.channel}\" === \"widget\" && !!session('SEARCH_RESULTS') && !session('SUGGESTED_ANSWER') && !session('TOP_ANSWER') && !session('TOP_FAQ')",
            "outputSpeech": {
              "ssml": "",
              "displayText": "Sorry, I‚Äôm not sure I understood that.  I‚Äôm still learning‚Ä¶\nThe articles below may help."
            }
          },
          {
            "outputSpeech": {
              "ssml": "<speak>I'm sorry, I don't know that one. What else can I help you with?</speak>",
              "displayText": "I'm sorry, I don't know that one. What else can I help you with?"
            },
            "reprompt": {
              "ssml": "<speak>What else can I help you with?</speak>",
              "displayText": "What else can I help you with?"
            }
          },
          {
            "displays": [
              {
                "itemsObject": "${SEARCH_RESULTS}",
                "range": {
                  "length": 5,
                  "from": 0
                },
                "itemsName": "currentResult",
                "type": "LIST",
                "title": "${$.request.rawQuery}",
                "items": [
                  {
                    "description": "${currentResult.document}",
                    "title": "${currentResult.title}",
                    "url": "${currentResult.source}",
                    "synonyms": [],
                    "token": "result-${index}"
                  }
                ]
              }
            ],
            "conditions": "\"${$.request.device.channel}\" === \"intelligent-search\" && !!session('SEARCH_RESULTS') && !session('SUGGESTED_ANSWER') && !session('TOP_ANSWER') && !session('TOP_FAQ')",
            "outputSpeech": {
              "ssml": "<speak>Results</speak>",
              "displayText": "__Results__"
            }
          },
          {
            "suggestions": [
              {
                "title": "Read More",
                "url": "${SUGGESTED_ANSWER.source}"
              }
            ],
            "conditions": "\"${$.request.device.channel}\" === \"intelligent-search\" && !!session('SEARCH_RESULTS') && !!session('SUGGESTED_ANSWER') && !session('TOP_ANSWER') && !session('TOP_FAQ')",
            "displays": [
              {
                "itemsObject": "${SEARCH_RESULTS}",
                "range": {
                  "length": 5,
                  "from": 0
                },
                "itemsName": "currentResult",
                "type": "LIST",
                "title": "${$.request.rawQuery}",
                "items": [
                  {
                    "description": "${currentResult.document}",
                    "title": "${currentResult.title}",
                    "url": "${currentResult.source}",
                    "synonyms": [],
                    "token": "result-${index}"
                  }
                ]
              }
            ],
            "outputSpeech": {
              "displayText": "__Suggested Answer__\n\"${SUGGESTED_ANSWER.markdownText}\"",
              "ssml": "<speak></speak>"
            }
          },
          {
            "conditions": "\"${$.request.device.channel}\" === \"Twilio-SMS\" && !!session('TOP_ANSWER') && !session('TOP_FAQ')",
            "outputSpeech": {
              "displayText": "${TOP_ANSWER.markdownText}\n\nAny other questions?",
              "ssml": "<speak>${TOP_ANSWER.text} Any other questions?</speak>",
              "suggestions": [
                {
                  "title": "Read More",
                  "url": "${TOP_ANSWER.source}"
                }
              ]
            },
            "reprompt": {
              "displayText": "Any other questions?",
              "ssml": "<speak>Any other questions?</speak>"
            }
          },
          {
            "conditions": "\"${$.request.device.channel}\" === \"Twilio-SMS\" && !!session('TOP_FAQ')",
            "outputSpeech": {
              "displayText": "${TOP_FAQ.markdownText}\n\nAny other questions?",
              "ssml": "<speak>${TOP_FAQ.text} Any other questions?</speak>",
              "suggestions": [
                {
                  "title": "Read More",
                  "url": "${TOP_FAQ.source}"
                }
              ]
            },
            "reprompt": {
              "displayText": "Any other questions?",
              "ssml": "<speak>Any other questions?</speak>"
            }
          }
        ]
      },
      "forward": {},
      "nlu": {
        "lex-connect": {
          "type": "AMAZON.KendraSearchIntent"
        },
        "lex-v2": {
          "type": "AMAZON.KendraSearchIntent"
        }
      },
      "data": {
        "QNA_BOT_LONGEST_HIGHLIGHT": false,
        "REMOVE_LEADING_LINES_WITHOUT_HIGHLIGHTS": true,
        "REMOVE_TRAILING_LINES_WITHOUT_HIGHLIGHTS": true,
        "FUZZY_MATCH_FAQS": true
      },
      "slots": [],
      "intentId": "OCSearch",
      "langCode": "en-US",
      "name": "‚ùì Search",
      "type": "QuestionAnsweringHandler",
      "utterancePatterns": []
    },
    {
      "content": {
        "^((?!(CancelIntent|Peebo|StopIntent)).)*$": [
          {
            "outputSpeech": {
              "ssml": "<speak>I'm sorry, please select from one of the following: Warrick, Monroe, Wamapoke or Marion.</speak>",
              "displayText": "I'm sorry, please select from one of the following: Warrick, Monroe, Wamapoke or Marion.",
              "suggestions": [
                {
                  "title": "Warrick"
                },
                {
                  "title": "Monroe"
                },
                {
                  "title": "Wamapoke"
                },
                {
                  "title": "Marion"
                }
              ]
            },
            "reprompt": {
              "ssml": "<speak>Please select either Warrick, Monroe, Wamapoke or Marion.</speak>",
              "displayText": "Please select either Warrick, Monroe, Wamapoke or Marion."
            }
          }
        ],
        "Peebo": [
          {
            "outputSpeech": {
              "ssml": "<speak>Congratulations ü•≥!  You found our secret trivia game!  Let's put your Parks and Recreation knowledge to the test.  First question: __What fictional county is Pawnee in?__</speak>",
              "displayText": "Congratulations ü•≥!  You found our secret trivia game!  Let's put your Parks and Recreation knowledge to the test.  First question: __What fictional county is Pawnee in?__",
              "suggestions": [
                {
                  "title": "Warrick"
                },
                {
                  "title": "Monroe"
                },
                {
                  "title": "Wamapoke"
                },
                {
                  "title": "Marion"
                }
              ]
            },
            "reprompt": {
              "ssml": "<speak>First question, in what fictional county is Pawnee in?</speak>",
              "displayText": "First question, in what fictional county is Pawnee in?"
            }
          }
        ]
      },
      "forward": {
        "County": [
          {
            "type": "START",
            "intentId": "PeeboQuestionTwo"
          }
        ]
      },
      "contexts": [],
      "slots": [],
      "intentId": "Peebo",
      "name": "üêºPeebo / Quiz Start",
      "type": "ConversationHandler",
      "utterancePatterns": [
        "{who|what} is peebo",
        "peebo"
      ]
    },
    {
      "content": {
        "PeeboQuestionThree|NumberOnly": [
          {
            "conditions": "Number(\"${$.request.slots.number.value}\") === 512",
            "outputSpeech": {
              "ssml": "<speak>Correct!  \n\n\"Most people call it a gallon, but they call it a regular.  Then there is a horrifying 512-ounce version that they call child size\" - Leslie Knope</speak>",
              "displayText": "Correct!  \n\n\"Most people call it a gallon, but they call it a regular.  Then there is a horrifying 512-ounce version that they call child size\" - Leslie Knope"
            }
          },
          {
            "conditions": "Number(\"${$.request.slots.number.value}\") < 512",
            "outputSpeech": {
              "ssml": "<speak>Try again, go __higher__ than ${$.request.slots.number.value}.\n\n${TOO_LOW_COMMENT}</speak>",
              "displayText": "Try again, go __higher__ than ${$.request.slots.number.value}.\n\n${TOO_LOW_COMMENT}"
            },
            "segments": {
              "TOO_LOW_COMMENT": [
                {
                  "segment": {
                    "displayText": "We are talking Paunch Burger here!",
                    "ssml": "<speak>We are talking Paunch Burger here!</speak>"
                  }
                },
                {
                  "segment": {
                    "displayText": "Keep going!",
                    "ssml": "<speak>Keep going!</speak>"
                  }
                },
                {
                  "segment": {
                    "displayText": "What would Paunch Burger do?",
                    "ssml": "<speak>What would Paunch Burger do?</speak>"
                  }
                }
              ]
            }
          },
          {
            "outputSpeech": {
              "ssml": "<speak>Try again, __lower__ than ${$.request.slots.number.value}.\n\n${TOO_HIGH_COMMENT}</speak>",
              "displayText": "Try again, __lower__ than ${$.request.slots.number.value}.\n\n${TOO_HIGH_COMMENT}"
            },
            "segments": {
              "TOO_HIGH_COMMENT": [
                {
                  "segment": {
                    "displayText": "Take it down a notch.",
                    "ssml": "<speak>Take it down a notch.</speak>"
                  }
                },
                {
                  "segment": {
                    "displayText": "Let's not get too crazy.",
                    "ssml": "<speak>Let's not get too crazy.</speak>"
                  }
                },
                {
                  "segment": {
                    "displayText": "Woah there.",
                    "ssml": "<speak>Woah there.</speak>"
                  }
                }
              ]
            }
          }
        ]
      },
      "forward": {},
      "slots": [],
      "intentId": "PeeboQuestionThree",
      "name": "üêº Question Three",
      "type": "InSessionIntent",
      "utterancePatterns": []
    },
    {
      "content": {
        "PeeboQuestionTwo": [
          {
            "name": "Correct Answer",
            "conditions": "slotEquals(\"county\", \"wamapoke\")",
            "outputSpeech": {
              "ssml": "<speak>Correct!  Wamapoke County is where you can find Pawnee.\n\nOk!  Next question, __how many ounces is the child size at Paunch Burger?__</speak>",
              "displayText": "Correct!  Wamapoke County is where you can find Pawnee.\n\nOk!  Next question, __how many ounces is the child size at Paunch Burger?__"
            }
          },
          {
            "name": "Incorrect Answer",
            "outputSpeech": {
              "ssml": "<speak>Sorry, incorrect.  Wamapoke County is where you can find Pawnee.\n\n\nOk!  Next question, __how many ounces is the child size at Paunch Burger?__</speak>",
              "displayText": "Sorry, incorrect.  Wamapoke County is where you can find Pawnee.\n\n\nOk!  Next question, __how many ounces is the child size at Paunch Burger?__"
            }
          }
        ],
        "^((?!(CancelIntent|Peebo|StopIntent)).)*$": [
          {
            "outputSpeech": {
              "ssml": "<speak>Please only provide a number.  How many ounces is a child size at Paunch Burger?</speak>",
              "displayText": "Please only provide a number.  How many ounces is a child size at Paunch Burger?"
            }
          }
        ]
      },
      "forward": {
        "NumberOnly": [
          {
            "type": "START",
            "intentId": "PeeboQuestionThree"
          }
        ]
      },
      "slots": [],
      "intentId": "PeeboQuestionTwo",
      "name": "üêº Question Two",
      "type": "InSessionIntent",
      "utterancePatterns": []
    }
  ],
  "entities": [
    {
      "values": [
        {
          "name": "Boone Bread Factory"
        },
        {
          "name": "Sweetums"
        },
        {
          "name": "Paunch Burger"
        },
        {
          "name": "Big 'n Wide"
        },
        {
          "name": "Fatsack"
        },
        {
          "name": "Tom's Bistro"
        },
        {
          "name": "Gryzzl"
        },
        {
          "name": "Reagle Meagle Reality"
        }
      ],
      "displayName": "üíµBusinesses",
      "entityId": "BUSINESSES"
    },
    {
      "values": [
        {
          "name": "raccoon",
          "synonyms": [
            "raccoon",
            "trash panda",
            "raykin"
          ]
        },
        {
          "name": "possum"
        },
        {
          "name": "rat"
        },
        {
          "name": "bed bug"
        }
      ],
      "displayName": "ü¶ùPest",
      "entityId": "PEST"
    },
    {
      "values": [
        {
          "name": "allen"
        },
        {
          "name": "laporte"
        },
        {
          "name": "marion"
        },
        {
          "name": "tipton"
        },
        {
          "name": "wamapoke"
        },
        {
          "name": "warren"
        },
        {
          "name": "warrick"
        },
        {
          "name": "monroe"
        }
      ],
      "displayName": "üó∫Ô∏èCounties",
      "entityId": "COUNTIES"
    },
    {
      "values": [
        {
          "name": "agent"
        },
        {
          "name": "representative"
        },
        {
          "name": "associate"
        },
        {
          "name": "live person"
        }
      ],
      "displayName": "üíÅ  Agent",
      "entityId": "AGENT"
    },
    {
      "values": [
        {
          "name": "yes"
        },
        {
          "name": "yeah"
        },
        {
          "name": "sure"
        },
        {
          "name": "yup"
        }
      ],
      "displayName": "üôÜ‚Äç‚ôÄÔ∏è Yes",
      "entityId": "YES"
    },
    {
      "values": [
        {
          "name": "mosquito spray"
        },
        {
          "name": "grass cutting",
          "synonyms": [
            "grass cutting",
            "mowing"
          ]
        },
        {
          "name": "towing"
        },
        {
          "name": "bulk trash pickup"
        },
        {
          "name": "pothole repair"
        },
        {
          "name": "tree removal"
        }
      ],
      "displayName": "üößService",
      "entityId": "SERVICE"
    },
    {
      "values": [
        {
          "name": "no"
        },
        {
          "name": "naw"
        },
        {
          "name": "nope"
        }
      ],
      "displayName": "üôÖ‚Äç‚ôÄÔ∏è No",
      "entityId": "NO"
    }
  ]
}